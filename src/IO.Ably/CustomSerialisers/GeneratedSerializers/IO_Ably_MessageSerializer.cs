//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IO.Ably.CustomSerialisers {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.6.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class IO_Ably_MessageSerializer : MsgPack.Serialization.MessagePackSerializer<IO.Ably.Message> {
        
        private MsgPack.Serialization.MessagePackSerializer<string> _serializer0;
        
        private MsgPack.Serialization.MessagePackSerializer<object> _serializer1;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Nullable<System.DateTimeOffset>> _serializer2;
        
        public IO_Ably_MessageSerializer(MsgPack.Serialization.SerializationContext context) : 
                base(context) {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            schema0 = null;
            this._serializer0 = context.GetSerializer<string>(schema0);
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            schema1 = null;
            this._serializer1 = context.GetSerializer<object>(schema1);
            MsgPack.Serialization.PolymorphismSchema schema2 = default(MsgPack.Serialization.PolymorphismSchema);
            schema2 = null;
            this._serializer2 = context.GetSerializer<System.Nullable<System.DateTimeOffset>>(schema2);
        }
        
        protected override void PackToCore(MsgPack.Packer packer, IO.Ably.Message objectTree) {
            packer.PackMapHeader(8);
            this._serializer0.PackTo(packer, "clientId");
            this._serializer0.PackTo(packer, objectTree.clientId);
            this._serializer0.PackTo(packer, "connection_id");
            this._serializer0.PackTo(packer, objectTree.connection_id);
            this._serializer0.PackTo(packer, "data");
            this._serializer1.PackTo(packer, objectTree.data);
            this._serializer0.PackTo(packer, "data_raw");
            this._serializer1.PackTo(packer, objectTree.data_raw);
            this._serializer0.PackTo(packer, "encoding");
            this._serializer0.PackTo(packer, objectTree.encoding);
            this._serializer0.PackTo(packer, "id");
            this._serializer0.PackTo(packer, objectTree.id);
            this._serializer0.PackTo(packer, "name");
            this._serializer0.PackTo(packer, objectTree.name);
            this._serializer0.PackTo(packer, "timestamp");
            this._serializer2.PackTo(packer, objectTree.timestamp);
        }
        
        protected override IO.Ably.Message UnpackFromCore(MsgPack.Unpacker unpacker) {
            IO.Ably.Message result = default(IO.Ably.Message);
            result = new IO.Ably.Message();
            if (unpacker.IsArrayHeader) {
                int unpacked = default(int);
                int itemsCount = default(int);
                itemsCount = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
                string nullable = default(string);
                if ((unpacked < itemsCount)) {
                    nullable = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Message), "System.String clientId");
                }
                if (((nullable == null) 
                            == false)) {
                    result.clientId = nullable;
                }
                unpacked = (unpacked + 1);
                string nullable0 = default(string);
                if ((unpacked < itemsCount)) {
                    nullable0 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Message), "System.String connection_id");
                }
                if (((nullable0 == null) 
                            == false)) {
                    result.connection_id = nullable0;
                }
                unpacked = (unpacked + 1);
                object nullable1 = default(object);
                if ((unpacked < itemsCount)) {
                    if ((unpacker.Read() == false)) {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(2);
                    }
                    if (((unpacker.IsArrayHeader == false) 
                                && (unpacker.IsMapHeader == false))) {
                        nullable1 = this._serializer1.UnpackFrom(unpacker);
                    }
                    else {
                        MsgPack.Unpacker disposable = default(MsgPack.Unpacker);
                        disposable = unpacker.ReadSubtree();
                        try {
                            nullable1 = this._serializer1.UnpackFrom(disposable);
                        }
                        finally {
                            if (((disposable == null) 
                                        == false)) {
                                disposable.Dispose();
                            }
                        }
                    }
                }
                if (((nullable1 == null) 
                            == false)) {
                    result.data = nullable1;
                }
                unpacked = (unpacked + 1);
                object nullable2 = default(object);
                if ((unpacked < itemsCount)) {
                    if ((unpacker.Read() == false)) {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(3);
                    }
                    if (((unpacker.IsArrayHeader == false) 
                                && (unpacker.IsMapHeader == false))) {
                        nullable2 = this._serializer1.UnpackFrom(unpacker);
                    }
                    else {
                        MsgPack.Unpacker disposable0 = default(MsgPack.Unpacker);
                        disposable0 = unpacker.ReadSubtree();
                        try {
                            nullable2 = this._serializer1.UnpackFrom(disposable0);
                        }
                        finally {
                            if (((disposable0 == null) 
                                        == false)) {
                                disposable0.Dispose();
                            }
                        }
                    }
                }
                if (((nullable2 == null) 
                            == false)) {
                    result.data_raw = nullable2;
                }
                unpacked = (unpacked + 1);
                string nullable3 = default(string);
                if ((unpacked < itemsCount)) {
                    nullable3 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Message), "System.String encoding");
                }
                if (((nullable3 == null) 
                            == false)) {
                    result.encoding = nullable3;
                }
                unpacked = (unpacked + 1);
                string nullable4 = default(string);
                if ((unpacked < itemsCount)) {
                    nullable4 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Message), "System.String id");
                }
                if (((nullable4 == null) 
                            == false)) {
                    result.id = nullable4;
                }
                unpacked = (unpacked + 1);
                string nullable5 = default(string);
                if ((unpacked < itemsCount)) {
                    nullable5 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Message), "System.String name");
                }
                if (((nullable5 == null) 
                            == false)) {
                    result.name = nullable5;
                }
                unpacked = (unpacked + 1);
                System.Nullable<System.DateTimeOffset> nullable6 = default(System.Nullable<System.DateTimeOffset>);
                if ((unpacked < itemsCount)) {
                    if ((unpacker.Read() == false)) {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(7);
                    }
                    if (((unpacker.IsArrayHeader == false) 
                                && (unpacker.IsMapHeader == false))) {
                        nullable6 = this._serializer2.UnpackFrom(unpacker);
                    }
                    else {
                        MsgPack.Unpacker disposable1 = default(MsgPack.Unpacker);
                        disposable1 = unpacker.ReadSubtree();
                        try {
                            nullable6 = this._serializer2.UnpackFrom(disposable1);
                        }
                        finally {
                            if (((disposable1 == null) 
                                        == false)) {
                                disposable1.Dispose();
                            }
                        }
                    }
                }
                if (nullable6.HasValue) {
                    result.timestamp = nullable6;
                }
                unpacked = (unpacked + 1);
            }
            else {
                int itemsCount0 = default(int);
                itemsCount0 = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
                for (int i = 0; (i < itemsCount0); i = (i + 1)) {
                    string key = default(string);
                    string nullable7 = default(string);
                    nullable7 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Message), "MemberName");
                    if (((nullable7 == null) 
                                == false)) {
                        key = nullable7;
                    }
                    else {
                        throw MsgPack.Serialization.SerializationExceptions.NewNullIsProhibited("MemberName");
                    }
                    if ((key == "timestamp")) {
                        System.Nullable<System.DateTimeOffset> nullable15 = default(System.Nullable<System.DateTimeOffset>);
                        if ((unpacker.Read() == false)) {
                            throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                        }
                        if (((unpacker.IsArrayHeader == false) 
                                    && (unpacker.IsMapHeader == false))) {
                            nullable15 = this._serializer2.UnpackFrom(unpacker);
                        }
                        else {
                            MsgPack.Unpacker disposable4 = default(MsgPack.Unpacker);
                            disposable4 = unpacker.ReadSubtree();
                            try {
                                nullable15 = this._serializer2.UnpackFrom(disposable4);
                            }
                            finally {
                                if (((disposable4 == null) 
                                            == false)) {
                                    disposable4.Dispose();
                                }
                            }
                        }
                        if (nullable15.HasValue) {
                            result.timestamp = nullable15;
                        }
                    }
                    else {
                        if ((key == "name")) {
                            string nullable14 = default(string);
                            nullable14 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Message), "System.String name");
                            if (((nullable14 == null) 
                                        == false)) {
                                result.name = nullable14;
                            }
                        }
                        else {
                            if ((key == "id")) {
                                string nullable13 = default(string);
                                nullable13 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Message), "System.String id");
                                if (((nullable13 == null) 
                                            == false)) {
                                    result.id = nullable13;
                                }
                            }
                            else {
                                if ((key == "encoding")) {
                                    string nullable12 = default(string);
                                    nullable12 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Message), "System.String encoding");
                                    if (((nullable12 == null) 
                                                == false)) {
                                        result.encoding = nullable12;
                                    }
                                }
                                else {
                                    if ((key == "data_raw")) {
                                        object nullable11 = default(object);
                                        if ((unpacker.Read() == false)) {
                                            throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                                        }
                                        if (((unpacker.IsArrayHeader == false) 
                                                    && (unpacker.IsMapHeader == false))) {
                                            nullable11 = this._serializer1.UnpackFrom(unpacker);
                                        }
                                        else {
                                            MsgPack.Unpacker disposable3 = default(MsgPack.Unpacker);
                                            disposable3 = unpacker.ReadSubtree();
                                            try {
                                                nullable11 = this._serializer1.UnpackFrom(disposable3);
                                            }
                                            finally {
                                                if (((disposable3 == null) 
                                                            == false)) {
                                                    disposable3.Dispose();
                                                }
                                            }
                                        }
                                        if (((nullable11 == null) 
                                                    == false)) {
                                            result.data_raw = nullable11;
                                        }
                                    }
                                    else {
                                        if ((key == "data")) {
                                            object nullable10 = default(object);
                                            if ((unpacker.Read() == false)) {
                                                throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                                            }
                                            if (((unpacker.IsArrayHeader == false) 
                                                        && (unpacker.IsMapHeader == false))) {
                                                nullable10 = this._serializer1.UnpackFrom(unpacker);
                                            }
                                            else {
                                                MsgPack.Unpacker disposable2 = default(MsgPack.Unpacker);
                                                disposable2 = unpacker.ReadSubtree();
                                                try {
                                                    nullable10 = this._serializer1.UnpackFrom(disposable2);
                                                }
                                                finally {
                                                    if (((disposable2 == null) 
                                                                == false)) {
                                                        disposable2.Dispose();
                                                    }
                                                }
                                            }
                                            if (((nullable10 == null) 
                                                        == false)) {
                                                result.data = nullable10;
                                            }
                                        }
                                        else {
                                            if ((key == "connection_id")) {
                                                string nullable9 = default(string);
                                                nullable9 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Message), "System.String connection_id");
                                                if (((nullable9 == null) 
                                                            == false)) {
                                                    result.connection_id = nullable9;
                                                }
                                            }
                                            else {
                                                if ((key == "clientId")) {
                                                    string nullable8 = default(string);
                                                    nullable8 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.Message), "System.String clientId");
                                                    if (((nullable8 == null) 
                                                                == false)) {
                                                        result.clientId = nullable8;
                                                    }
                                                }
                                                else {
                                                    unpacker.Skip();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }
        
        private static T @__Conditional<T>(bool condition, T whenTrue, T whenFalse)
         {
            if (condition) {
                return whenTrue;
            }
            else {
                return whenFalse;
            }
        }
    }
}
