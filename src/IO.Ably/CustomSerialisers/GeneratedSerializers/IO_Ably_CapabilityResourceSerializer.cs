//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IO.Ably.CustomSerialisers {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.6.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class IO_Ably_CapabilityResourceSerializer : MsgPack.Serialization.MessagePackSerializer<IO.Ably.CapabilityResource> {
        
        private MsgPack.Serialization.MessagePackSerializer<string> _serializer0;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.List<string>> _serializer1;
        
        public IO_Ably_CapabilityResourceSerializer(MsgPack.Serialization.SerializationContext context) : 
                base(context) {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            schema0 = null;
            this._serializer0 = context.GetSerializer<string>(schema0);
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            schema1 = null;
            this._serializer1 = context.GetSerializer<System.Collections.Generic.List<string>>(schema1);
        }
        
        protected override void PackToCore(MsgPack.Packer packer, IO.Ably.CapabilityResource objectTree) {
            packer.PackMapHeader(2);
            this._serializer0.PackTo(packer, "AllowedOperations");
            this._serializer1.PackTo(packer, objectTree.AllowedOperations);
            this._serializer0.PackTo(packer, "Name");
            this._serializer0.PackTo(packer, objectTree.Name);
        }
        
        protected override IO.Ably.CapabilityResource UnpackFromCore(MsgPack.Unpacker unpacker) {
            IO.Ably.CapabilityResource result = default(IO.Ably.CapabilityResource);
            result = new IO.Ably.CapabilityResource();
            if (unpacker.IsArrayHeader) {
                int unpacked = default(int);
                int itemsCount = default(int);
                itemsCount = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
                System.Collections.Generic.List<string> nullable = default(System.Collections.Generic.List<string>);
                if ((unpacked < itemsCount)) {
                    if ((unpacker.Read() == false)) {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(0);
                    }
                    if (((unpacker.IsArrayHeader == false) 
                                && (unpacker.IsMapHeader == false))) {
                        nullable = this._serializer1.UnpackFrom(unpacker);
                    }
                    else {
                        MsgPack.Unpacker disposable = default(MsgPack.Unpacker);
                        disposable = unpacker.ReadSubtree();
                        try {
                            nullable = this._serializer1.UnpackFrom(disposable);
                        }
                        finally {
                            if (((disposable == null) 
                                        == false)) {
                                disposable.Dispose();
                            }
                        }
                    }
                }
                if (((nullable == null) 
                            == false)) {
                    result.AllowedOperations = nullable;
                }
                unpacked = (unpacked + 1);
                string nullable0 = default(string);
                if ((unpacked < itemsCount)) {
                    nullable0 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.CapabilityResource), "System.String Name");
                }
                if (((nullable0 == null) 
                            == false)) {
                    result.Name = nullable0;
                }
                unpacked = (unpacked + 1);
            }
            else {
                int itemsCount0 = default(int);
                itemsCount0 = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
                for (int i = 0; (i < itemsCount0); i = (i + 1)) {
                    string key = default(string);
                    string nullable1 = default(string);
                    nullable1 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.CapabilityResource), "MemberName");
                    if (((nullable1 == null) 
                                == false)) {
                        key = nullable1;
                    }
                    else {
                        throw MsgPack.Serialization.SerializationExceptions.NewNullIsProhibited("MemberName");
                    }
                    if ((key == "Name")) {
                        string nullable3 = default(string);
                        nullable3 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.CapabilityResource), "System.String Name");
                        if (((nullable3 == null) 
                                    == false)) {
                            result.Name = nullable3;
                        }
                    }
                    else {
                        if ((key == "AllowedOperations")) {
                            System.Collections.Generic.List<string> nullable2 = default(System.Collections.Generic.List<string>);
                            if ((unpacker.Read() == false)) {
                                throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                            }
                            if (((unpacker.IsArrayHeader == false) 
                                        && (unpacker.IsMapHeader == false))) {
                                nullable2 = this._serializer1.UnpackFrom(unpacker);
                            }
                            else {
                                MsgPack.Unpacker disposable0 = default(MsgPack.Unpacker);
                                disposable0 = unpacker.ReadSubtree();
                                try {
                                    nullable2 = this._serializer1.UnpackFrom(disposable0);
                                }
                                finally {
                                    if (((disposable0 == null) 
                                                == false)) {
                                        disposable0.Dispose();
                                    }
                                }
                            }
                            if (((nullable2 == null) 
                                        == false)) {
                                result.AllowedOperations = nullable2;
                            }
                        }
                        else {
                            unpacker.Skip();
                        }
                    }
                }
            }
            return result;
        }
        
        private static T @__Conditional<T>(bool condition, T whenTrue, T whenFalse)
         {
            if (condition) {
                return whenTrue;
            }
            else {
                return whenFalse;
            }
        }
    }
}
